{"version":3,"sources":["components/Leaderboard.js","components/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["Leaderboard","_ref","data","currentPage","setCurrentPage","useState","startIndex","endIndex","currentData","slice","totalPages","Math","ceil","length","React","createElement","className","map","item","index","key","username","points","onClick","handlePrevious","disabled","handleNext","SearchBar","query","onQueryChange","type","placeholder","value","onChange","e","target","App","setData","setQuery","useEffect","async","parsedData","axios","get","values","parseInt","fetchData","filteredData","filter","toLowerCase","includes","sort","a","b","rank","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"iOAyEeA,MAtEKC,IAAe,IAAd,KAAEC,GAAMD,EAE3B,MAAOE,EAAaC,GAAkBC,mBAAS,GAIzCC,EAHc,IAGAH,EAAc,GAC5BI,EAAWD,EAJG,GAKdE,EAAcN,EAAKO,MAAMH,EAAYC,GAGrCG,EAAaC,KAAKC,KAAKV,EAAKW,OARd,IAuBpB,OACEC,IAAAC,cAAA,OAAKC,UAAU,yBACbF,IAAAC,cAAA,OAAKC,UAAU,uBACbF,IAAAC,cAAA,OAAKC,UAAU,eACbF,IAAAC,cAAA,aACED,IAAAC,cAAA,aACED,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,QACJD,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,UAAI,YAGRD,IAAAC,cAAA,aACGP,EAAYS,IAAI,CAACC,EAAMC,IACtBL,IAAAC,cAAA,MAAIK,IAAKF,EAAKG,UACZP,IAAAC,cAAA,UAAKT,EAAaa,EAAQ,GAC1BL,IAAAC,cAAA,UAAKG,EAAKG,UACVP,IAAAC,cAAA,UAAKG,EAAKI,aAOpBR,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,UAAQQ,QA/BOC,KACjBrB,EAAc,GAChBC,EAAeD,EAAc,IA6BQsB,SAA0B,IAAhBtB,GAAmB,YAG9DW,IAAAC,cAAA,YAAM,QACEZ,EAAY,OAAKO,GAEzBI,IAAAC,cAAA,UAAQQ,QA3CGG,KACbvB,EAAcO,GAChBN,EAAeD,EAAc,IAyCIsB,SAAUtB,IAAgBO,GAAY,UAMvEI,IAAAC,cAAA,OAAKC,UAAU,sBCnDNW,MAbG1B,IAA+B,IAA9B,MAAE2B,EAAK,cAAEC,GAAe5B,EACzC,OACEa,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,SACEe,KAAK,OACLC,YAAY,2BACZC,MAAOJ,EACPK,SAAWC,GAAML,EAAcK,EAAEC,OAAOH,WCsCjCI,MArCf,WACE,MAAOlC,EAAMmC,GAAWhC,mBAAS,KAC1BuB,EAAOU,GAAYjC,mBAAS,IAEnCkC,oBAAU,KACUC,WAChB,MAGMC,SAFiBC,IAAMC,IADjB,6JAEUzC,KAAK0C,OAAOnC,MAAM,GAChBQ,IAAIhB,IAAA,IAAEoB,EAAUC,GAAOrB,EAAA,MAAM,CACnDoB,WACAC,OAAQuB,SAASvB,MAEnBe,EAAQI,IAEVK,IACC,IAEH,MAAMC,EAAe7C,EAClB8C,OAAQ9B,GACPA,EAAKG,SAAS4B,cAAcC,SAAStB,EAAMqB,gBAE5CE,KAAK,CAACC,EAAGC,IAAMA,EAAE/B,OAAS8B,EAAE9B,QAC5BL,IAAI,CAACC,EAAMC,KAAK,IACZD,EACHoC,KAAMnC,EAAQ,KAGlB,OACEL,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,uBACJD,IAAAC,cAACY,EAAS,CAACC,MAAOA,EAAOC,cAAeS,IACxCxB,IAAAC,cAACf,EAAW,CAACE,KAAM6C,MC9BVQ,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKzD,IAAkD,IAAjD,OAAE0D,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAS9D,EACpE0D,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHtD,IAAAC,cAACD,IAAMuD,WAAU,KACfvD,IAAAC,cAACqB,EAAG,QAORmB,K","file":"static/js/main.d5da5dbf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../App.css\"; // Use your existing CSS file\r\n\r\nconst Leaderboard = ({ data }) => {\r\n  // State for current page and rows per page\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const rowsPerPage = 10; // Number of rows per page\r\n\r\n  // Calculate indices for pagination\r\n  const startIndex = (currentPage - 1) * rowsPerPage;\r\n  const endIndex = startIndex + rowsPerPage;\r\n  const currentData = data.slice(startIndex, endIndex); // Paginated data\r\n\r\n  // Calculate total pages\r\n  const totalPages = Math.ceil(data.length / rowsPerPage);\r\n\r\n  // Handlers for pagination\r\n  const handleNext = () => {\r\n    if (currentPage < totalPages) {\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    if (currentPage > 1) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"leaderboard-container\">\r\n      <div className=\"leaderboard-wrapper\">\r\n        <div className=\"leaderboard\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Rank</th>\r\n                <th>Username</th>\r\n                <th>Points</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {currentData.map((item, index) => (\r\n                <tr key={item.username}>\r\n                  <td>{startIndex + index + 1}</td>\r\n                  <td>{item.username}</td>\r\n                  <td>{item.points}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div className=\"pagination\">\r\n          <button onClick={handlePrevious} disabled={currentPage === 1}>\r\n            Previous\r\n          </button>\r\n          <span>\r\n            Page {currentPage} of {totalPages}\r\n          </span>\r\n          <button onClick={handleNext} disabled={currentPage === totalPages}>\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"image-container\">\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Leaderboard;\r\n","import React from \"react\";\r\n\r\nconst SearchBar = ({ query, onQueryChange }) => {\r\n  return (\r\n    <div className=\"search-bar\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search for a username...\"\r\n        value={query}\r\n        onChange={(e) => onQueryChange(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Leaderboard from \"./components/Leaderboard\";\r\nimport SearchBar from \"./components/SearchBar\";\r\nimport \"./App.css\";\r\n\r\nconst SHEET_ID = process.env.REACT_APP_SHEET_ID; // Replace with your sheet's ID\r\nconst API_KEY = process.env.REACT_APP_GOOGLE_API_KEY; // Replace with your API key\r\nconst sheetRange = \"Sheet1!A:B\"; // Usernames (Column A), Points (Column B)\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${sheetRange}?key=${API_KEY}`;\r\n      const response = await axios.get(url);\r\n      const rows = response.data.values.slice(1); // Excludes header row\r\n      const parsedData = rows.map(([username, points]) => ({\r\n        username,\r\n        points: parseInt(points),\r\n      }));\r\n      setData(parsedData);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const filteredData = data\r\n    .filter((item) =>\r\n      item.username.toLowerCase().includes(query.toLowerCase())\r\n    )\r\n    .sort((a, b) => b.points - a.points)  // Sort by points in descending order\r\n    .map((item, index) => ({\r\n      ...item,         // Spread the existing item properties\r\n      rank: index + 1  // Assign a rank based on the position in the sorted array\r\n    }));\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Puppies Leaderboard</h1>\r\n      <SearchBar query={query} onQueryChange={setQuery} />\r\n      <Leaderboard data={filteredData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}